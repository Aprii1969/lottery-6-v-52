


# **LABCORE: Концепция, Архитектура и Взаимодействие Модулей**

Программа LABCORE (Лаборатория Комбинаторных Решений) разработана как комплексный инструмент для анализа лотереи "6 из 52", генерации комбинаций, их сверки и, самое главное, адаптивного обучения и управления процессом через модули АКК (Адаптивный Комбинаторный Контроллер) и LABCORE-80.

## **1. Общая Концепция и Цель Программы:**

Основная идея LABCORE — не просто генерировать случайные числа, а искать и использовать **закономерности** в истории тиражей для повышения вероятности выигрыша. Это достигается за счет:
* **Сбора и хранения данных:** История всех тиражей.
* **Глубокого анализа:** Выявление скрытых паттернов, "горячих" и "холодных" чисел, структурных особенностей.
* **Прогнозирования:** Использование математических моделей и машинного обучения для предсказания наиболее вероятных чисел и комбинаций.
* **Адаптации:** Модуль АКК постоянно отслеживает эффективность прогнозов и корректирует параметры системы для улучшения результатов.
* **Автоматизации:** LABCORE-80 позволяет автоматизировать циклы анализа, генерации и сверки.
* **Прозрачности:** Подробные отчеты о каждом этапе работы.

## **2. Архитектура Программы (Модули и Взаимосвязи):**

Программа построена по модульному принципу, где каждая вкладка или логический блок представляет собой отдельный модуль со своей зоной ответственности.

### **2.1. Основные Модули и Их Назначение:**

1.  **`main.py` (Главный Запуск GUI):**
    * **Назначение:** Точка входа в программу. Инициализирует главное окно и создает вкладки пользовательского интерфейса.
    * **Взаимосвязь:** Загружает и отображает все основные вкладки (`DrawsTab`, `GenerationTab`, `CompareTab`, `TrainingTab`, `AkkTab`, `ReportsTab`).

2.  **`interface_draws_tab.py` (Вкладка "Тиражи"):**
    * **Назначение:** Управление историей тиражей. Позволяет загружать CSV-файлы с историей, просматривать её и вручную добавлять новые тиражи.
    * **Взаимосвязь:**
        * Читает/записывает `labcore_draws.csv`.
        * Предоставляет актуальную историю тиражей другим модулям (например, для анализа, сверки, обучения).

3.  **`generate/generation_tab.py` (Вкладка "Генерация"):**
    * **Назначение:** Пользовательский интерфейс для запуска процесса генерации комбинаций. Позволяет выбрать параметры генерации (например, контур A/B, количество комбинаций).
    * **Взаимосвязь:**
        * Использует `generate/generator.py` для выполнения самой генерации.
        * Сохраняет сгенерированные комбинации в `generated/` каталог.
        * Загружает настройки генерации из `config/`.

4.  **`generate/generator.py` (Ядро Генерации):**
    * **Назначение:** Содержит основную логику генерации лотерейных комбинаций. Использует различные алгоритмы и модели, опираясь на данные из `pool_stats.json`, `quota_config.json`, `softpool_config.json` и других файлов настроек.
    * **Взаимосвязь:**
        * Читает данные из `labcore_draws.csv` для анализа истории.
        * Использует обученные модели (из `models/`) для прогнозирования.
        * Работает с конфигурационными файлами (`config/`).
        * Вызывается из `generation_tab.py` и `akk/LABCORE_80.py`.

5.  **`compare_tab.py` (Вкладка "Сверка"):**
    * **Назначение:** Позволяет сравнить сгенерированные комбинации с фактическими результатами тиражей. Отображает количество совпадений и формирует отчеты. Поддерживает ручную и автоматическую сверку.
    * **Взаимосвязь:**
        * Читает `labcore_draws.csv` для получения номеров тиражей.
        * Читает файлы сгенерированных комбинаций из `generated/`.
        * Сохраняет отчеты о сверке в `reports/Сверка_inf/`.
        * Ключевой модуль для АКК, так как результаты сверки определяют необходимость адаптации.

6.  **`reports_tab.py` (Вкладка "Отчёты"):**
    * **Назначение:** Предоставляет интерфейс для просмотра всех сгенерированных отчетов (о сверке, обучении и т.д.).
    * **Взаимосвязь:** Просто отображает содержимое каталогов `reports/`.

7.  **`training_tab.py` (Вкладка "Обучение Моделей"):**
    * **Назначение:** Управление процессом обучения и переобучения внутренних моделей программы. Здесь будут выбираться данные для обучения, запускаться алгоритмы и сохраняться новые/обновленные модели.
    * **Взаимосвязь:**
        * Использует `labcore_draws.csv` как источник данных для обучения.
        * Сохраняет обученные модели в `models/`.
        * Может быть вызван АКК для автоматического переобучения.

8.  **`akk_tab.py` (Вкладка "АКК / LABCORE"):**
    * **Назначение:** Центральная панель управления для автономного режима и модуля АКК. Отображает статус системы, позволяет запускать циклы LABCORE-80, а также настраивать параметры АКК и Тест-Лаборатории.
    * **Взаимосвязь:**
        * Использует `akk/LABCORE_80.py` для выполнения циклов.
        * Использует `akk/AKK.py` для принятия решений об адаптации.
        * Использует `akk/module_back.py` для обратного анализа.
        * Читает/записывает конфигурации АКК и LABCORE-80 (`config/akk_config.json`, `config/labcore_80_config.json`).
        * Читает/записывает состояние LABCORE (`labcore_safe/labcore_state.json`).

### **2.2. Вспомогательные Модули и Каталоги:**

* **`utils/json_utils.py`:**
    * **Назначение:** Вспомогательные функции для удобной загрузки и сохранения JSON-файлов конфигурации.
    * **Взаимосвязь:** Используется практически всеми модулями, которым требуется чтение или запись настроек.

* **`config/` (Каталог Конфигураций):**
    * **Назначение:** Хранит все настройки программы в формате JSON. Каждый файл отвечает за определенный аспект системы (например, `core_settings.json` - общие настройки, `akk_config.json` - настройки АКК, `pool_stats.json` - статистика по числам).
    * **Взаимосвязь:** Все модули, которым нужны настройки, читают их отсюда. Модули, которые изменяют настройки (например, АКК), записывают их сюда.

* **`generated/` (Каталог Сгенерированных Комбинаций):**
    * **Назначение:** Хранит все CSV-файлы с комбинациями, сгенерированными программой для каждого тиража.
    * **Взаимосвязь:** `generator.py` записывает сюда, `compare_tab.py` читает отсюда.

* **`akk/` (Каталог Модулей АКК):**
    * **`AKK.py` (Адаптивный Комбинаторный Контроллер):**
        * **Назначение:** "Мозг" системы адаптации. Анализирует результаты сверки (из `compare_tab`), сравнивает их с целевыми порогами (из `akk_config.json`). Если результаты не соответствуют целям (например, мало 5+ совпадений), АКК принимает решение о необходимости адаптации: корректировки параметров генерации, переобучения моделей или изменения весов.
        * **Взаимосвязь:** Получает данные от `compare_tab` (через `LABCORE_80`), изменяет параметры в `config/` файлах, может инициировать переобучение через `training_tab` (в автономном режиме).
    * **`LABCORE_80.py` (Основной Цикл Автоматизации):**
        * **Назначение:** Управляет автономным циклом работы программы. Последовательно выполняет шаги: проверка нового тиража, сверка, анализ АКК, корректировка, генерация, отчеты.
        * **Взаимосвязь:** Центральный оркестратор. Вызывает функции из `interface_draws_tab` (для получения тиража), `compare_tab` (для сверки), `AKK.py` (для адаптации), `generator.py` (для генерации). Сохраняет свое состояние в `labcore_safe/labcore_state.json`.
    * **`module_back.py` (Обратный Анализ):**
        * **Назначение:** Модуль для проведения обратного анализа, например, для выявления "пропущенных" чисел или "лишних" в сгенерированных комбинациях. Используется для более глубокого понимания поведения системы.
        * **Взаимосвязь:** Может быть вызван АКК или вручную для диагностики.

* **`labcore_safe/labcore_state.json`:**
    * **Назначение:** Хранит текущее состояние LABCORE-80: последний обработанный тираж, последний сгенерированный тираж и т.д. Это позволяет программе возобновить работу с того места, где она остановилась.
    * **Взаимосвязь:** Читается и записывается `LABCORE_80.py`.

* **`reports/` (Каталог Отчетов):**
    * **Назначение:** Хранит все сгенерированные отчеты (сверки, логи обучения и т.д.).
    * **Взаимосвязь:** `compare_tab.py` и `training_tab.py` (а также другие модули в будущем) записывают сюда.

## **3. Как Работают Модели и Прогнозирование:**

В LABCORE прогнозирование и генерация комбинаций основаны на нескольких принципах:

1.  **Статистический Анализ (Pool Stats):**
    * Программа анализирует историю тиражей (`labcore_draws.csv`) для сбора статистики по каждому числу: как часто оно выпадает, его средний интервал между выпадениями, "горячие" (часто выпадающие) и "холодные" (редко выпадающие) числа. Эти данные сохраняются в `config/pool_stats.json`.
    * **Прогнозирование:** На основе этой статистики определяются числа, которые "наиболее вероятны" или "наименее вероятны" к выпадению в следующем тираже.

2.  **Квоты и Ограничения (Quota Config, Softpool Config):**
    * **Назначение:** Определяют структурные правила для генерации комбинаций. Например, сколько четных/нечетных чисел должно быть в комбинации, сколько чисел из определенных диапазонов (1-10, 11-20 и т.д.), сколько чисел из "горячего" или "холодного" пула.
    * **Прогнозирование:** Эти правила помогают отсеивать "маловероятные" комбинации и сосредоточиться на тех, которые статистически чаще встречаются в выигрышных тиражах.

3.  **Модели Машинного Обучения (в `models/`):**
    * **Назначение:** В будущем здесь будут храниться обученные модели (например, нейронные сети, регрессионные модели), которые анализируют более сложные взаимосвязи между числами, последовательности выпадений и другие неочевидные паттерны.
    * **Прогнозирование:** Эти модели будут выдавать "вероятностные оценки" для различных чисел или их сочетаний, которые затем используются `generator.py` для формирования комбинаций.
    * **Взаимосвязь:** `training_tab.py` будет отвечать за обучение этих моделей, а `generator.py` будет их использовать. АКК может инициировать переобучение, если производительность падает.

4.  **AI Помощник (AI Supervisor / LABCORE-80 - Будущее):**
    * **Назначение:** Это будет более продвинутый уровень автоматизации и адаптации. Цель AI Помощника — не просто следовать правилам, а "понимать" контекст, анализировать сложные тренды, принимать решения о том, какие модели использовать, когда переобучать, и даже динамически корректировать стратегии генерации.
    * **Взаимосвязь:** AI Помощник будет взаимодействовать с АКК и LABCORE-80, предоставляя им более "умные" указания и корректировки, основанные на глубоком анализе данных и производительности системы. Он будет использовать данные из `attention_weights.json`, `f_metrics.json`, `glue_clusters.json`, `psw_config.json`, `sleepy_zones.json` для принятия решений.

## **4. Как Работает АКК (Адаптивный Комбинаторный Контроллер) и LABCORE-80:**

Это сердце адаптивной и автономной работы системы.

### **4.1. LABCORE-80 (Основной Цикл):**

LABCORE-80 — это оркестратор, который выполняет последовательность действий в каждом "цикле" работы программы, особенно в автономном режиме.

**Типичный Цикл LABCORE-80:**

1.  **Проверка Нового Тиража:** LABCORE-80 проверяет, появился ли новый тираж в `labcore_draws.csv`. Если да, он загружает его.
2.  **Сверка:** Вызывает функционал сверки (`compare_tab.py`), чтобы сравнить сгенерированные ранее комбинации (для *предыдущего* тиража) с фактически выпавшими номерами.
3.  **Анализ АКК и Принятие Решений:** Передает результаты сверки модулю АКК (`AKK.py`). АКК анализирует, насколько хорошо система справилась с прогнозированием.
4.  **Выполнение Корректировок / Переобучения (если необходимо):**
    * Если АКК определяет, что производительность ниже целевых порогов (например, мало 5+ совпадений), он принимает решение об адаптации.
    * Это может быть:
        * **Корректировка параметров генерации:** Изменение весов чисел, диапазонов, квот в файлах `config/`.
        * **Переобучение моделей:** Запуск процесса обучения через `training_tab.py` для обновления прогностических моделей.
        * **Изменение стратегии:** Переключение на другой "контур" генерации (A или B), если один из них показывает лучшие результаты.
5.  **Генерация Комбинаций:** Используя обновленные параметры и/или переобученные модели, LABCORE-80 вызывает `generator.py` для создания нового набора комбинаций для *следующего* ожидаемого тиража.
6.  **Формирование и Отправка Отчётов:** Сохраняет отчеты о сверке, генерации и любых изменениях в `reports/`. В будущем может быть реализована отправка отчетов по email.
7.  **Сохранение Состояния:** Обновляет `labcore_safe/labcore_state.json` с информацией о последнем обработанном тираже и сгенерированных комбинациях.

### **4.2. АКК (Адаптивный Комбинаторный Контроллер):**

АКК — это система обратной связи. Её задача — постоянно оценивать эффективность прогнозов и адаптировать систему.

* **Целевые Пороги:** В `akk_config.json` заданы целевые проценты попаданий (например, "target_5_match_percentage": 0.80, что означает, что 80% всех сгенерированных комбинаций должны иметь как минимум 5 совпадений с выигрышным тиражом). Также есть минимальные пороги.
* **Мониторинг:** АКК получает результаты сверки (сколько 3, 4, 5, 6 совпадений было в сгенерированных комбинациях).
* **Принятие Решений:**
    * Если фактические результаты **ниже** целевых порогов, АКК активирует режим адаптации. Он может увеличить "агрессивность" генерации, изменить веса чисел, или, в более сложных случаях, инициировать полное переобучение моделей.
    * Если результаты **соответствуют** или **превышают** пороги, АКК может поддерживать текущие параметры или вносить незначительные корректировки для "тонкой настройки".
* **История Адаптации:** АКК может вести историю своих адаптаций, чтобы учиться на прошлых изменениях и избегать повторения неэффективных стратегий.

## **5. Общая Концепция Работы (Поток):**

1.  **Начальная Настройка:** Пользователь загружает исторические данные тиражей (`labcore_draws.csv`) и, при необходимости, настраивает общие параметры в `config/`.
2.  **Ручная Генерация/Сверка (Опционально):** Пользователь может вручную сгенерировать комбинации и сверить их с любым тиражом.
3.  **Запуск Автономного Режима (LABCORE-80):** Пользователь активирует автономный режим на вкладке "АКК / LABCORE".
4.  **Циклическая Работа:** LABCORE-80 начинает выполнять циклы:
    * Ждет нового тиража.
    * Сверяет предыдущие прогнозы с новым тиражом.
    * АКК оценивает результаты сверки.
    * Если нужно, АКК корректирует внутренние параметры или инициирует переобучение моделей.
    * Генерируются новые комбинации для следующего тиража.
    * Сохраняются отчеты и обновляется состояние системы.
5.  **Мониторинг:** Пользователь может отслеживать прогресс и результаты через вкладки "АКК / LABCORE" (лог, статус) и "Отчёты".
6.  **Вмешательство (Опционально):** Пользователь может в любой момент остановить автономный режим, вручную изменить настройки, запустить обучение или провести диагностику.



